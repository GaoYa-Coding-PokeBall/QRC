from scipy.stats import unitary_group
from numpy import linalg as la
import numpy as np
import qutip as qt
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression

# open file
def open_file(r):
    with open(r, 'r') as file:
        lines = file.readlines()
    integers = [int(line.strip()) for line in lines]
    # Santa Fe Laser Data 1000
    laser_data = np.array(integers[:1000])
    # normalize to [0, 1]
    laser_data_normalized = (laser_data - np.min(laser_data)) / (np.max(laser_data) - np.min(laser_data))
    return laser_data_normalized

def split_train_test(seq, tau):
    # tau: Memory delay
    train_size = int(0.7 * (len(seq) - tau))  # 70% train size
    train = seq[tau:tau + train_size]
    test = seq[tau + train_size:]
    return train, test

def J_ij(Js, N):
    return np.random.uniform(-Js / 2.0, Js / 2.0, (N, N))

def h_generate(B, W, N):
    return 0.5 * np.random.uniform(B - W, B + W, N)

# Function to generate Hamiltonian
def Op_list(N, obs):
    Op = []
    I = qt.qeye(2)
    for i in range(N):
        Op_list = []
        for j in range(N):
            Op_list.append(I)
        Op_list[i] = obs
        Op.append(qt.tensor(Op_list))  # Use qutip.tensor to create operator
    return Op

# Function to generate 2D measurement operator: tensor(sigma_direction_i, sigma_direction_j)
def Obs_generate(N, sigma, positions):
    I = qt.qeye(2)
    op_list = [I] * N
    for pos in positions:
        op_list[pos] = sigma
    result_op = op_list[0]
    for i in range(1, N):
        result_op = qt.tensor(result_op, op_list[i])
    return result_op

def H_generate(N):
    # Ising Model
    # H_hat = 0.5 * sum(h * sigmaz) + sum(J_ij * sigmax_i * sigmax_j)
    H = qt.qzero([2] * N)  # Start with a qzero of appropriate dimensions
    X = Op_list(N, qt.sigmax())  # Get list of X operators
    Z = Op_list(N, qt.sigmaz())  # Get list of Z operators
    for i in range(N):
        H += h[i] * Z[i]  # Add magnetic field term
        for j in range(i + 1, N):
            H += J[i][j] * X[i] * X[j]  # Add interaction term
    return H

def ptrace(rho, N):
    reshaped_rho = rho.reshape([2, 2 ** (N - 1), 2, 2 ** (N - 1)])
    reduced_rho = np.einsum('ijik->jk', reshaped_rho, optimize=True)
    return reduced_rho

def all_equal_dm(N):
    dims = int(2 ** N)
    dm = np.full((dims, dims), 1.0 / float(dims), dtype=np.complex128)
    return dm

def rho_generate(seq):
    sk = seq
    psi_k = np.array([np.sqrt(1 - sk), np.sqrt(sk)])  # |psi_k> = sqrt(1 - sk)|0> + sqrt(sk)|1>
    rho_k = np.outer(psi_k, psi_k)
    return rho_k

def generate_M(N, g):
    M_single = np.array([[1, np.exp(-g ** 2 / 2)], [np.exp(-g ** 2 / 2), 1]])
    result = M_single
    for _ in range(N - 1):
        result = np.kron(result, M_single)
    return result

def expectation(g, N, seq, U, O):
    o_expectation = []
    rho = all_equal_dm(N)
    M = generate_M(N, g)
    for k in range(len(seq)):
        rou_in = rho_generate(seq[k])
        L = np.dot(U, np.dot(np.kron(rou_in, ptrace(rho, N)), U.conj().T))
        rho = M * L  # (8)
        o_expectation.append(np.trace(np.dot(O, rho)).real)
    return o_expectation

def calculate_capacity(y, y_pred):
    if y.ndim == 2 and y.shape[1] == 1:
        y = y.flatten()
    if y_pred.ndim == 2 and y_pred.shape[1] == 1:
        y_pred = y_pred.flatten()
    variance_y = np.var(y)
    variance_y_pred = np.var(y_pred)
    covariance = np.cov(y, y_pred)[0][1]
    capacity = (covariance ** 2) / (variance_y * variance_y_pred)
    return capacity

def linear_layer(input_train, exp_train, input_test, exp_test):
    # Train readout using Linear Regression
    linear_reg = LinearRegression()
    linear_reg.fit(np.array(exp_train).reshape(-1, 1), input_train)
    # Predict outputs for test set
    predictions_test = linear_reg.predict(np.array(exp_test).reshape(-1, 1))
    # Calculate error for test set
    mse = mean_squared_error(input_test, predictions_test)
    c = calculate_capacity(input_test, predictions_test)
    # print(f'Mean Squared Error on test set: {mse:.4f}, Capacity: {c:.2f}')
    return predictions_test, mse, c
def delay_situation(seq, t):
    input_sequence_train, input_sequence_test = split_train_test(seq, tau=t)
    y1_train = expectation(g=0.3, N=2, seq=input_sequence_train, U=matrixU, O=Obs)
    y1_test = expectation(g=0.3, N=2, seq=input_sequence_test, U=matrixU, O=Obs)
    y2_train = expectation(g=10, N=2, seq=input_sequence_train, U=matrixU, O=Obs)
    y2_test = expectation(g=10, N=2, seq=input_sequence_test, U=matrixU, O=Obs)

    predict1, MSE1, C1 = linear_layer(input_sequence_train, y1_train, input_sequence_test, y1_test)  # g=0.3
    predict2, MSE2, C2 = linear_layer(input_sequence_train, y2_train, input_sequence_test, y2_test)  # g=10
    return predict1, MSE1, C1, predict2, MSE2, C2, input_sequence_test
#------------------------------------------------------------------------------------------------------------------
N = 2
dt = 10.0
Js = 1.0
hs = 10.0  # homogeneous magnetic field
W = 0.0  # heterogeneous magnetic field
sequence = open_file('C:\\Users\\win 10\\OneDrive\\Desktop\\laser.txt')  # [0, 1]
N_meas=10
delays = np.arange(1,11)  # Delays from 1 to 10
C1_meas=[]
C2_meas=[]
for i in delays:
    C1 = []
    C2 = []
    for _ in range(N_meas):
        J = J_ij(Js, N)
        h = h_generate(hs, W, N)
        H = H_generate(N)
        eigvals, eigvects = la.eigh(H.full())  # Convert Qobj to NumPy array and Diagonalize the Hamiltonian
        P = eigvects.T
        matrixU = P.T @ np.diag(np.exp(-1j * eigvals * dt)) @ P  # Unitary evolution operator using @ for matrix multiplication
        Obs = Obs_generate(N, sigma=qt.sigmaz(), positions=[0, 1]).full()  # Measurement in the z direction for qubits 1 and 2
        C1.append(delay_situation(seq=sequence, t=i)[2])
        C2.append(delay_situation(seq=sequence, t=i)[5])
    C1_meas.append(np.mean(C1))
    C2_meas.append(np.mean(C2))

plt.figure(figsize=(8, 6))
plt.plot(delays, C1_meas, 'orange', label='OLP, g=0.3')
plt.plot(delays, C2_meas, 'green', label='OLP, g=10')
# Adding labels and title
plt.xlabel('Delay Ï„')
plt.ylabel('STM Capacity C')
plt.title('STM Capacity for Two-Qubit Observables')
plt.legend()
plt.grid(True)
# Show plot
plt.show()
